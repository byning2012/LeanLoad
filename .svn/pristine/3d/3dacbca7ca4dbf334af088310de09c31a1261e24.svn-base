package com.hzxm.easyloan.ui.activity;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v4.widget.SwipeRefreshLayout;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.hzxm.easyloan.R;
import com.hzxm.easyloan.model.mine.BaseCertificationModel;
import com.hzxm.easyloan.presenter.implPresenter.BaseCertifyPresenter;
import com.hzxm.easyloan.presenter.implView.IBaseCertificationView;
import com.hzxm.easyloan.utils.Constant;
import com.lmz.baselibrary.ui.BaseActivity;
import com.lmz.baselibrary.util.SharedPreferencesUtil;
import com.lmz.baselibrary.widget.StatusBarCompat;

import butterknife.BindString;
import butterknife.BindView;
import butterknife.OnClick;

/**
 * 基础认证
 */
public class BaseCertificationActivity extends BaseActivity implements IBaseCertificationView {
    @BindView(R.id.refresh_layout)
    SwipeRefreshLayout mRefreshLayout;
    @BindView(R.id.tv_verified)
    TextView tvVerified;
    @BindView(R.id.rl_verified)
    RelativeLayout rlVerified;
    @BindView(R.id.tv_doc_upload)
    TextView tvDocUpload;
    @BindView(R.id.rl_doc_upload)
    RelativeLayout rlDocUpload;
    @BindView(R.id.tv_verified_state)
    TextView tvVerifiedState;
    @BindView(R.id.rl_sesame_points)
    RelativeLayout rlSesamePoints;
    @BindView(R.id.tv_phone_certification)
    TextView tvPhoneCertification;
    @BindView(R.id.rl_phone_certification)
    RelativeLayout rlPhoneCertification;
    @BindView(R.id.tv_emergency_contact)
    TextView tvEmergencyContact;
    @BindView(R.id.rl_emergency_contact)
    RelativeLayout rlEmergencyContact;
    @BindView(R.id.tv_reserved_bank_card)
    TextView tvReservedBankCard;
    @BindView(R.id.rl_reserved_bank_card)
    RelativeLayout rlReservedBankCard;
    @BindView(R.id.tv_now_address)
    TextView tvNowAddress;
    @BindView(R.id.rl_now_address)
    RelativeLayout rlNowAddress;
    @BindView(R.id.activity_base_certification)
    LinearLayout activityBaseCertification;

    public String isBaseCertifiActivity = "isBaseCertifiActivity";

    //已认证
    @BindString(R.string.already_verified)
    String mAleadyVerified;
    @BindString(R.string.verification_ok)
    String mVerificationOk;
    @BindView(R.id.btn_error)
    Button btnError;
    @BindView(R.id.error_page)
    LinearLayout errorPage;


    private BaseCertifyPresenter mBaseCertifyPresenter;
    private int uid;

    // 1：申请认证，2认证通过，3认证失败，4未实名认证），在基础认证里面，只有在3的情况下才能修改
    private String status;

    @Override
    protected void initConvetView(Bundle saveInstanceState) {
        setContentView(R.layout.activity_base_certification);
    }

    @Override
    protected void initView(Bundle saveInstanceState) {
        SetStatusBarColor(R.color.transparent_white);
    }

    @Override
    protected void initData() {
        uid = SharedPreferencesUtil.getInstance(getApplicationContext()).getInt(Constant.UID, -1);
        mBaseCertifyPresenter = new BaseCertifyPresenter(this, uid);
        mRefreshLayout.setOnRefreshListener(mBaseCertifyPresenter);
        mRefreshLayout.setRefreshing(true);
        mBaseCertifyPresenter.onRefresh();

    }

    /**
     * 加载失败 点击刷新
     */
    @OnClick(R.id.btn_error)
    public void errorRefreshLayout() {
        mRefreshLayout.setRefreshing(true);
        mBaseCertifyPresenter.onRefresh();
    }

    /**
     * 实名认证,证件上传
     */
    @OnClick({R.id.rl_verified, R.id.rl_doc_upload})
    public void verified(RelativeLayout rl) {
        if ("2".equals(status)) {
            showToast(mVerificationOk, Toast.LENGTH_SHORT);
            return;
        }
        Bundle bundle = new Bundle();
        switch (rl.getId()) {
            case R.id.rl_verified:   //实名认证
                bundle.putInt(isBaseCertifiActivity, 1);
                startActivityForResult(VerifiedActivity.class, bundle, 101);
                break;
            case R.id.rl_doc_upload:  //证件上传
                bundle.putInt(isBaseCertifiActivity, 1);
                startActivityForResult(DocUploadActivity.class, bundle, 102);
                break;
        }


    }

    /**
     * 现住地址
     */
    @OnClick(R.id.rl_now_address)
    public void currentAddress() {
        startActivity(CurrentAddressActivity.class);
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        //实名验证返回
        if (requestCode == 101 && resultCode == 101) {
            tvVerified.setText(mAleadyVerified);
        }
    }

    /**
     * 请求成功
     *
     * @param baseCertificationModel
     */
    @Override
    public void data(BaseCertificationModel baseCertificationModel) {
        activityBaseCertification.setVisibility(View.VISIBLE);
        errorPage.setVisibility(View.GONE);
        status = baseCertificationModel.getData().getStatus();
    }

    @Override
    public void showProgressDialog() {

    }

    @Override
    public void hiteProgressDialog() {
        mRefreshLayout.setRefreshing(false);
    }

    @Override
    public void showError(String error) {
        activityBaseCertification.setVisibility(View.GONE);
        errorPage.setVisibility(View.VISIBLE);
        showToast(error, Toast.LENGTH_SHORT);
    }
}
