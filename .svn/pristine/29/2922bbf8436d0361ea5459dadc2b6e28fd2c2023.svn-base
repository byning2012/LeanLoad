package com.lmz.baselibrary.ui;

import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Toast;

import com.lmz.baselibrary.R;
import com.lmz.baselibrary.listener.IPermissionResultListener;
import com.lmz.baselibrary.util.AppActivityManager;
import com.lmz.baselibrary.util.NetWorkUtil;
import com.lmz.baselibrary.util.StringUtils;
import com.lmz.baselibrary.widget.StatusBarCompat;

import butterknife.ButterKnife;


/**
 * 作者：LMZ on 2016/12/20 0020 14:15
 */
public abstract class BaseActivity extends AppCompatActivity {
    private IPermissionResultListener mIPermissionResultListener;
    private int mRequestCode;
    public static BaseActivity activity;
    public Toast mToast;
    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;
    private Dialog dialog;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        activity = this;
        initConvetView(savedInstanceState);
        ButterKnife.bind(this);
        AppActivityManager.getAppManager().addActivity(this);
        SetStatusBarColor(R.color.home_blue);
        initView(savedInstanceState);
        initData();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();
        registerReceiver(netWorkBroadcastReceiver, intentFilter);
        //  SetTranslanteBar();

    }

    protected abstract void initConvetView(Bundle saveInstanceState);

    protected abstract void initView(Bundle saveInstanceState);

    protected abstract void initData();


    @Override
    protected void onResume() {
        super.onResume();
        activity = this;
    }

    @Override
    protected void onPause() {
        super.onPause();
        activity = null;
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        AppActivityManager.getAppManager().removeActivity(this);
    }

    /**
     * 通过Class跳转界面
     **/
    public void startActivity(Class<?> cls) {
        startActivity(cls, null);
    }

    /**
     * 通过Class跳转界面
     **/
    public void startActivityForResult(Class<?> cls, int requestCode) {
        startActivityForResult(cls, null, requestCode);
    }

    /**
     * 含有Bundle通过Class跳转界面
     **/
    public void startActivityForResult(Class<?> cls, Bundle bundle,
                                       int requestCode) {
        Intent intent = new Intent();
        intent.setClass(this, cls);
        if (bundle != null) {
            intent.putExtras(bundle);
        }
        startActivityForResult(intent, requestCode);
    }

    /**
     * 含有Bundle通过Class跳转界面
     **/
    public void startActivity(Class<?> cls, Bundle bundle) {
        Intent intent = new Intent();
        intent.setClass(this, cls);
        if (bundle != null) {
            intent.putExtras(bundle);
        }
        startActivity(intent);
    }

    /**
     * 着色状态栏（4.4以上系统有效）
     */
    protected void SetStatusBarColor(int color) {
//        //清除黑字体状态栏
        StatusBarCompat.StatusBarDarkMode(this, StatusBarCompat.StatusBarLightMode(this));
        switch (StatusBarCompat.StatusBarLightMode(this)) {
            case 0:  //不是白色可以处理的
                StatusBarCompat.setStatusBarColor(this, ContextCompat.getColor(this, R.color.home_blue));
                break;
            default:
                StatusBarCompat.setStatusBarColor(this, ContextCompat.getColor(this, color));
                //下面 是兼容 部分系统白色状态栏 的代码
                StatusBarCompat.StatusBarLightMode(this, StatusBarCompat.StatusBarLightMode(this));
                break;
        }
    }

    /**
     * 沉浸状态栏（4.4以上系统有效）
     */

    protected void SetTranslanteBar() {
        StatusBarCompat.translucentStatusBar(this);
    }


    protected void permissionRequest(String msg, String[] permissions, int requestCode, IPermissionResultListener iPermissionResultListener) {
        if (permissions == null || permissions.length == 0) {
            return;
        }
        mRequestCode = requestCode;
        mIPermissionResultListener = iPermissionResultListener;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkPermission(permissions)) { //如果没有权限 需要申请
                requestPermission(msg, permissions, requestCode);
            } else {  //有权限
                mIPermissionResultListener.onPermissionSuccess();
            }
        } else {
            if (mIPermissionResultListener != null) {
                mIPermissionResultListener.onPermissionSuccess();
            }
        }

    }

    /**
     * 检查权限
     */
    private boolean checkPermission(String[] permissions) {
        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                return true;
            }
        }
        return false;
    }

    /**
     * 申请权限
     */
    private void requestPermission(String msg, String[] permissions, int requestCode) {
        //先判断是否已经拒绝过了
        if (shouldShowRequestPermission(permissions)) {
            //弹出Dialog 给用户说明
            showRequestDialog(msg, permissions, requestCode);
        } else {
            ActivityCompat.requestPermissions(BaseActivity.this, permissions, requestCode);
        }
    }

    /**
     * 再次申请时
     */
    private boolean shouldShowRequestPermission(String[] permissions) {
        for (String permission : permissions) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) {
                return true;
            }
        }
        return false;
    }

    /**
     * 弹出的Dialog
     */
    private void showRequestDialog(String msg, final String[] permissions, final int requestCode) {
        new AlertDialog.Builder(this)
                .setTitle("友好提醒")
                .setMessage(msg)
                .setPositiveButton("好，给你", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        ActivityCompat.requestPermissions(BaseActivity.this, permissions, requestCode);
                    }
                })
                .setNegativeButton("我拒绝", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                })
                .setCancelable(false)
                .show();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == mRequestCode) {
            if (checkRequestResult(grantResults)) {
                if (mIPermissionResultListener != null) {  //回调成功
                    mIPermissionResultListener.onPermissionSuccess();
                }
            } else {
                if (mIPermissionResultListener != null) {
                    mIPermissionResultListener.onPermissionFaild();
                }
            }
        }
    }

    /**
     * 检查回调结果
     */
    private boolean checkRequestResult(int[] grantResults) {
        for (int result : grantResults) {
            if (result != PackageManager.PERMISSION_GRANTED) {
                return false;
            }
        }
        return true;
    }

    /**
     * 显示Toast,页面中重复Toast不会重复实例化Toast对象
     *
     * @param str      String
     * @param duration 显示时间
     */
    public void showToast(String str, int duration) {
        if (mToast == null) {
            mToast = Toast.makeText(getApplicationContext(), str, duration);
        } else {
            mToast.setText(str);
            mToast.setDuration(duration);
        }
        mToast.show();
    }

    //隐藏软键盘
    public void hideKeyboard(IBinder windowToken) {
        if (windowToken != null) {
            InputMethodManager im = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
            im.hideSoftInputFromWindow(windowToken, InputMethodManager.HIDE_NOT_ALWAYS);
        }
    }

    class NetWorkBroadcastReceiver extends BroadcastReceiver {


        @Override
        public void onReceive(Context context, Intent intent) {
            /**
             * networkInfo.isAvailable();
             * 是否有网络连接
             */
            if (NetWorkUtil.isNetWorkAvailable(context)) {
                if (dialog != null && dialog.isShowing()) {
                    dialog.dismiss();
                }
                // isNotNet = true;
                //  Toast.makeText(context, "网络连接正常", Toast.LENGTH_SHORT).show();
            } else {
                //   isNotNet = false;
                showDialog();
            }
        }
    }

    protected void showDialog() {
        dialog = new Dialog(this, R.style.dialog);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        View view = LayoutInflater.from(this).inflate(R.layout.dialog_net_error, null);
        //删除按钮
        view.findViewById(R.id.iv_close).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        dialog.setContentView(view);
        Window window = dialog.getWindow();
        assert window != null;
        window.setFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);
        window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);
        WindowManager.LayoutParams wl = window.getAttributes();
        window.setGravity(Gravity.TOP);
        wl.alpha = 1.0f;
        wl.dimAmount = 0.0f;
        wl.y = StringUtils.dip2px(this, 45);
        dialog.onWindowAttributesChanged(wl);
        dialog.setCancelable(false);
        dialog.setCanceledOnTouchOutside(false);
        dialog.show();
    }
}
